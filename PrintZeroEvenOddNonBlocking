class ZeroEvenOdd {
    private int n;
    private AtomicBoolean printZero;
    private AtomicBoolean printEven;
    private AtomicBoolean printOdd;

    public ZeroEvenOdd(int n) {
        this.n = n;
        printZero = new AtomicBoolean(true);
        printEven = new AtomicBoolean(false);
        printOdd = new AtomicBoolean(false);
    }

    // printNumber.accept(x) outputs "x", where x is an integer.
    public void zero(IntConsumer printNumber) throws InterruptedException {
        for (int i = 0; i < n; i++) {
            while (!printZero.get()) {
                Thread.yield();
            }
            printNumber.accept(0);
            if (i % 2 == 0) {
                this.printOdd.set(true);
            } else {
                this.printEven.set(true);
            }
            this.printZero.set(false);

        }
    }

    public void even(IntConsumer printNumber) throws InterruptedException {
        for (int i = 2; i <= n; i += 2) {
            while (!printEven.get()) {
                Thread.yield();
            }
            printNumber.accept(i);
            this.printZero.set(true);
            this.printEven.set(false);
        }

    }

    public void odd(IntConsumer printNumber) throws InterruptedException {
        for (int i = 1; i <= n; i += 2) {
            while (!printOdd.get()) {
                Thread.yield();
            }
            printNumber.accept(i);
            this.printZero.set(true);
            this.printOdd.set(false);
        }
    }
}
