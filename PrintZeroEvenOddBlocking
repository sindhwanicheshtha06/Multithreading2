class ZeroEvenOdd {
    private int n;
    private boolean printZero;
    private boolean printEven;
    private boolean printOdd;

    public ZeroEvenOdd(int n) {
        this.n = n;
        printZero = true;
        printEven = false;
        printOdd = false;
    }

    // printNumber.accept(x) outputs "x", where x is an integer.
    public void zero(IntConsumer printNumber) throws InterruptedException {
        for (int i = 0; i < n; i++) {
            synchronized (this) {
                while (!printZero) {
                    wait();
                }
            }
            printNumber.accept(0);
            synchronized (this) {
                if (i % 2 == 0) {
                    this.printOdd = true;
                } else {
                    this.printEven = true;
                }
                this.printZero = false;
                this.notifyAll();
            }
        }
    }

    public void even(IntConsumer printNumber) throws InterruptedException {
        for (int i = 2; i <= n; i+=2) {
            synchronized (this) {
                while (!printEven) {
                    wait();
                }
            }
            printNumber.accept(i);
            synchronized (this) {
                this.printZero = true;
                this.printEven = false;
                this.notifyAll();
            }
        }
    }

    public void odd(IntConsumer printNumber) throws InterruptedException {
        for (int i = 1; i <= n; i+=2) {
            synchronized (this) {
                while (!printOdd) {
                    wait();
                }
            }
            printNumber.accept(i);
            synchronized (this) {
                this.printZero = true;
                this.printOdd = false;
                this.notifyAll();
            }
        }
    }
}
